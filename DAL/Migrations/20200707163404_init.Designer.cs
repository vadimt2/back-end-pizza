// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20200707163404_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Common.BellingAndShippInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BellingOrShipping")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTheSame")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("BellingAndShippInfo");
                });

            modelBuilder.Entity("Common.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Catrgories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All Pizza",
                            Title = "Pizza"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All Toopings",
                            Title = "Toopings"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All Pizza Crust",
                            Title = "PizzaCrust"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All Pizza Size",
                            Title = "PizzaSize"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All drinks",
                            Title = "Drinks"
                        });
                });

            modelBuilder.Entity("Common.CategoryItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("CategoryItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ItemId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ItemId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            ItemId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            ItemId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            ItemId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            ItemId = 9
                        });
                });

            modelBuilder.Entity("Common.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("UploadedImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            Url = "http://st1.foodsd.co.il/Images/Recipes/xxl/Recipe-5968-7g0fXYdnVNi1LZ7N.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 2,
                            Url = "https://media.metrolatam.com/2020/04/23/pizza14429461280-26168c22f83af34d20770970db28bb7b-1200x0.jpg"
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 3,
                            Url = "https://www.dominos.com.au/ManagedAssets/AU/product/P005/AU_P005_en_hero_4055.jpg"
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 4,
                            Url = "https://www.dominos.com.au/ManagedAssets/AU/product/P356/AU_P356_en_hero_4055.jpg"
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 5,
                            Url = "https://i.insider.com/5cf6d1ef11e2054bb76400b4?width=1100&format=jpeg&auto=webp"
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 6,
                            Url = "https://d1725r39asqzt3.cloudfront.net/9858a18d-613d-4d14-ad4d-bc87e000df9e/orig.jpg"
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 7,
                            Url = "https://www.sirpizzatn.com/wp-content/uploads/2017/09/RoyalFeast.jpg"
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 8,
                            Url = "https://images.squarespace-cdn.com/content/v1/53816030e4b0135aba1a2100/1454031327479-S1VJTYG878E9W09KM9DM/ke17ZwdGBToddI8pDm48kGdXwE-vebEpgb33VwdtsTxZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpyFXBTrd8RtdLuD2xTt52BcbibHP9HAWTuiNyjdIhZkDRmM2LuhCrpPu_cqK6msTYI/PizzaHut_TargetMenuBoards_MR-002.jpg"
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 9,
                            Url = "https://cdn.shopify.com/s/files/1/1335/2603/products/Coca-cola_regular_1024x1024.jpg"
                        });
                });

            modelBuilder.Entity("Common.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<int?>("ParentItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Description = "Try our the great pizza",
                            Price = 20m,
                            Title = "Great Pizza",
                            Total = 15m
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Description = "This spinach and feta pizza comes together really quickly, it’s a great veggie pizza option. It comes with homemade pizza sauce and homemade dough. Topped with lots of spinach, feta, red onions and sundried tomatoes this pizza is not short on flavour. I like to add some toasted pine nuts to this too just to add a little more crunch to my pizza.",
                            Price = 17.99m,
                            Title = "Spinach & Feta pizza",
                            Total = 17.99m
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Description = " Features traditional ham and pineapple as well as smoked bacon, roasted red peppers, mozzarella, and provolone cheese.",
                            Price = 14.99m,
                            Title = "Honolulu Hawaiian pizza",
                            Total = 14.99m
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Description = "This Philly Cheese Steak Pizza is cheesy, meaty, comfort food at it’s most addicting.  It starts by layering pizza dough with Alfredo Sauce followed by mozzarella cheese, juicy steak, bell peppers, mushrooms.",
                            Price = 11.99m,
                            Title = "Philly Cheese Steak pizza",
                            Total = 11.99m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Description = "It has (almost) everything: roasted red peppers, baby spinach, onions, mushrooms, tomatoes, and black olives. It's also topped with three kinds of cheese — feta, provolone, and mozzarella — and sprinkled with garlic herb seasoning.",
                            Price = 10m,
                            Title = "Pacific Veggie pizza",
                            Total = 10m
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Description = "Pizza with a little kick of buffalo wing flavor! Have your pizza and wings together!",
                            Price = 20m,
                            Title = "Buffalo Chicken pizza",
                            Total = 20m
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Description = "Try our great pizza",
                            Price = 11.99m,
                            Title = "Deluxe Feast pizza",
                            Total = 11.99m
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Description = "Beef pepperoni, Italian sausage, green peppers, mushrooms.",
                            Price = 20m,
                            Title = "Private Pizza",
                            Total = 20m
                        },
                        new
                        {
                            Id = 9,
                            Available = true,
                            Description = "Soda drink.",
                            Price = 1m,
                            Title = "Coke",
                            Total = 1m
                        });
                });

            modelBuilder.Entity("Common.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ConfirmationNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingId")
                        .HasColumnType("int");

                    b.Property<float>("Tax")
                        .HasColumnType("real");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShippingId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Common.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Common.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleType = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleType = "User"
                        },
                        new
                        {
                            Id = 3,
                            RoleType = "Guset"
                        });
                });

            modelBuilder.Entity("Common.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shipping");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Price = 5m,
                            Title = "Delivery"
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Price = 0m,
                            Title = "Pickup"
                        });
                });

            modelBuilder.Entity("Common.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Common.BellingAndShippInfo", b =>
                {
                    b.HasOne("Common.Order", "Order")
                        .WithMany("BellingAndShippInfo")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.CategoryItems", b =>
                {
                    b.HasOne("Common.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Item", "Item")
                        .WithMany("CategoryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Image", b =>
                {
                    b.HasOne("Common.Item", "Item")
                        .WithMany("Images")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Item", b =>
                {
                    b.HasOne("Common.Item", "ParentItem")
                        .WithMany("SubItem")
                        .HasForeignKey("ParentItemId");
                });

            modelBuilder.Entity("Common.Order", b =>
                {
                    b.HasOne("Common.Shipping", "Shipping")
                        .WithMany()
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.OrderDetails", b =>
                {
                    b.HasOne("Common.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.User", b =>
                {
                    b.HasOne("Common.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
